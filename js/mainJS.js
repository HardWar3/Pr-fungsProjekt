// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var bodyDerPade = window.document.body;
	Main.datenbankJson = datenbankJsonPage;
	var db = bodyDerPade.getElementsByTagName("script")[0];
	bodyDerPade.removeChild(db);
	pack_Datenbank.setDatenbank(Main.datenbankJson);
	pack_Etage.initEtage();
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var haxe_format_JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
haxe_format_JsonParser.__name__ = true;
haxe_format_JsonParser.prototype = {
	parseRec: function() {
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var c1 = c;
				var start = this.pos - 1;
				var minus = c1 == 45;
				var digit = !minus;
				var zero = c1 == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				var i = f | 0;
				if(i == f) {
					return i;
				} else {
					return f;
				}
				break;
			case 91:
				var arr = [];
				var comma = null;
				while(true) {
					var c2 = this.str.charCodeAt(this.pos++);
					switch(c2) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				var save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				var save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				var obj = { };
				var field = null;
				var comma1 = null;
				while(true) {
					var c3 = this.str.charCodeAt(this.pos++);
					switch(c3) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.str;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCharCode(c);
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 114:
					buf.b += "\r";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw new js__$Boot_HaxeError("Unclosed string");
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			var s1 = this.str;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: haxe_format_JsonParser
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var pack_Datenbank = function() { };
pack_Datenbank.__name__ = true;
pack_Datenbank.initDatenbank = function() {
	var laden = new XMLHttpRequest();
	laden.open("POST","laden.php",true);
	laden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	laden.send("");
	laden.onreadystatechange = function() {
		if(laden.readyState == 4 && laden.status == 200) {
			pack_Datenbank.responseDatenbankJson = new haxe_format_JsonParser(laden.responseText).parseRec();
		}
	};
};
pack_Datenbank.setDatenbank = function(datenbank) {
	pack_Datenbank.responseDatenbankJson = datenbank;
};
pack_Datenbank.getDatenbank = function() {
	return pack_Datenbank.responseDatenbankJson;
};
pack_Datenbank.setgetDatenbank = function(datenbank) {
	pack_Datenbank.responseDatenbankJson = datenbank;
	return pack_Datenbank.responseDatenbankJson;
};
var pack_Etage = function() { };
pack_Etage.__name__ = true;
pack_Etage.createEtage = function() {
	var datenbank = pack_Datenbank.getDatenbank();
	var etageName = pack_Etage.nameDerEtage;
	var etage = pack_Functions.createElemente("Div");
	var istEsEtage_1 = datenbank.etagen[0].etagen_ID == etageName;
	var istEsEtage_3 = datenbank.etagen[1].etagen_ID == etageName;
	var etagenIndex = null;
	if(istEsEtage_1) {
		etagenIndex = 1;
	} else if(istEsEtage_3) {
		etagenIndex = 2;
	}
	var istEtageNameEinString = typeof(etageName) == "string";
	if(istEtageNameEinString) {
		etage.setAttribute("class",etageName);
		pack_Etage.bodyDerPage.appendChild(etage);
	}
	var istRaeumeAnzahlEineNumber = typeof(raeume_DB) != "null";
	if(istRaeumeAnzahlEineNumber) {
		var _g1 = 0;
		var _g = datenbank.raeume.length;
		while(_g1 < _g) {
			var index = _g1++;
			var binIchEtage1 = etagenIndex == datenbank.raeume[index].etagenID;
			if(istEsEtage_1 && binIchEtage1) {
				var raum = pack_Functions.createElemente("div");
				var raumText = pack_Functions.createElemente("h1");
				var raumBelegung = pack_Functions.createElemente("p");
				var raumName = datenbank.raeume[index].raumName;
				var platzAnzahl = pack_Platz.getPlatzAnzahl(datenbank.raeume[index].raumID);
				var darfRaumZeigen = datenbank.raeume[index].view == 1;
				if(darfRaumZeigen) {
					var belegtePlaetze = pack_Platz.getPlatzBelegung(index + 1);
					raumBelegung.innerHTML = "" + belegtePlaetze[0] + "(" + belegtePlaetze[1] + ") / " + platzAnzahl;
				}
				raumText.innerHTML = raumName;
				raum.appendChild(raumText);
				raum.appendChild(raumBelegung);
				raum.setAttribute("class","raum" + (index + 1) + " " + "raum");
				etage.appendChild(raum);
			} else if(istEsEtage_3 && binIchEtage1) {
				var raum1 = pack_Functions.createElemente("div");
				var raumText1 = pack_Functions.createElemente("h1");
				var raumBelegung1 = pack_Functions.createElemente("p");
				var raumName1 = datenbank.raeume[index].raumName;
				var platzAnzahl1 = pack_Platz.getPlatzAnzahl(datenbank.raeume[index].raumID);
				var darfRaumZeigen1 = datenbank.raeume[index].view == 1;
				if(darfRaumZeigen1) {
					var belegtePlaetze1 = pack_Platz.getPlatzBelegung(index);
					console.log(belegtePlaetze1);
					raumBelegung1.innerHTML = "" + belegtePlaetze1[0] + "(" + belegtePlaetze1[1] + ") / " + platzAnzahl1;
				}
				raumText1.innerHTML = raumName1;
				raum1.appendChild(raumText1);
				raum1.appendChild(raumBelegung1);
				raum1.setAttribute("class","raum" + (index - 7) + " " + "raum");
				etage.appendChild(raum1);
			}
		}
	}
	pack_Raum.raumAddEvents(etageName);
	pack_Menu.zurueckZumHaubtMenu(etageName);
};
pack_Etage.initEtage = function() {
	console.log(pack_Datenbank.getDatenbank());
	pack_Etage.etagenErstellen();
};
pack_Etage.etagenErstellen = function() {
	var datenbank = pack_Datenbank.getDatenbank();
	var istImBodyKeineEtagen = pack_Etage.bodyDerPage.getElementsByClassName("etagen").length == 0;
	var hatDieseEtageEineLaenge = pack_Etage.nameDerEtage.length > 0;
	pack_Menu.checkMenu();
	if(istImBodyKeineEtagen && !hatDieseEtageEineLaenge) {
		var etagen = pack_Functions.createElemente("div");
		pack_Etage.bodyDerPage.appendChild(etagen);
		var etage_1 = pack_Functions.createElemente("div");
		var etage_3 = pack_Functions.createElemente("div");
		var etage_1Name = pack_Functions.createElemente("h1");
		var etage_3Name = pack_Functions.createElemente("h1");
		console.log(datenbank.etagen);
		etage_1Name.innerHTML = datenbank.etagen[0].etagenName;
		etage_3Name.innerHTML = datenbank.etagen[1].etagenName;
		etagen.appendChild(etage_1);
		etagen.appendChild(etage_3);
		etagen.setAttribute("class","etagen");
		etage_1.setAttribute("class","etage_1");
		etage_3.setAttribute("class","etage_3");
		etage_1.appendChild(etage_1Name);
		etage_3.appendChild(etage_3Name);
		etage_1.addEventListener("click",function() {
			window.console.log("ich bin etage1");
			pack_Etage.nameDerEtage = "etage_1";
			pack_Etage.inhaltDerEtage();
		});
		etage_3.addEventListener("click",function() {
			window.console.log("ich bin etage3");
			pack_Etage.nameDerEtage = "etage_3";
			pack_Etage.inhaltDerEtage();
		});
	}
};
pack_Etage.inhaltDerEtage = function() {
	var etagen = pack_Etage.bodyDerPage.getElementsByClassName("etagen")[0];
	var etagenLength = pack_Etage.bodyDerPage.getElementsByClassName("etagen").length;
	var istEtagenLengthUngleichZero = etagenLength != 0;
	if(istEtagenLengthUngleichZero) {
		pack_Etage.bodyDerPage.removeChild(etagen);
	} else {
		var etageElement = js_Boot.__cast(pack_Etage.bodyDerPage.childNodes[3] , HTMLElement);
		pack_Etage.bodyDerPage.removeChild(etageElement);
	}
	pack_Etage.createEtage();
	var istEtagenNamenGleichEtageDrei = pack_Etage.nameDerEtage == "etage_3";
	if(istEtagenNamenGleichEtageDrei) {
		pack_Raum.erstelleSpecialRaum();
		pack_Etage.nameDerEtage = "";
	} else {
		pack_Etage.nameDerEtage = "";
	}
};
pack_Etage.refreshEtage = function(etage) {
	console.log("ich bin " + etage);
	pack_Etage.nameDerEtage = etage;
	pack_Etage.inhaltDerEtage();
};
var pack_Functions = function() { };
pack_Functions.__name__ = true;
pack_Functions.createElemente = function(elementName) {
	var istELementNameEinString = typeof(elementName) == "string";
	if(istELementNameEinString) {
		var element = window.document.createElement(elementName);
		return element;
	}
	return null;
};
var pack_Menu = function() { };
pack_Menu.__name__ = true;
pack_Menu.checkMenu = function() {
	var istDieMenuleisteNichtExistent = pack_Menu.bodyDerPage.getElementsByClassName("menu").length == 0;
	if(istDieMenuleisteNichtExistent) {
		pack_Menu.addMenu();
	}
};
pack_Menu.addMenu = function() {
	var menu = pack_Functions.createElemente("div");
	var login = pack_Functions.createElemente("div");
	var content = pack_Functions.createElemente("div");
	menu.setAttribute("class","menu");
	login.setAttribute("class","login");
	content.setAttribute("class","view");
	menu.appendChild(login);
	menu.appendChild(content);
	pack_Menu.bodyDerPage.appendChild(menu);
};
pack_Menu.zurueckZumHaubtMenu = function(etage) {
	var istEtageEinString = typeof(etage) == "string";
	if(istEtageEinString) {
		var etage1 = pack_Menu.bodyDerPage.getElementsByClassName(etage)[0];
		var zurueckOption = pack_Functions.createElemente("span");
		zurueckOption.setAttribute("class","zurueckOption");
		zurueckOption.innerHTML = "⮜";
		etage1.appendChild(zurueckOption);
		zurueckOption.addEventListener("click",function() {
			pack_Menu.bodyDerPage.innerHTML = "";
			pack_Menu.dieseEtage = "";
			pack_Etage.initEtage();
		});
	}
};
var pack_Platz = function() { };
pack_Platz.__name__ = true;
pack_Platz.getIndexFromPlaetze_DB = function(platzID) {
	var datenbank = pack_Datenbank.getDatenbank();
	var platzID1 = platzID + 1;
	var returnIndex = null;
	var _g1 = 0;
	var _g = datenbank.plaetze.length;
	while(_g1 < _g) {
		var index = _g1++;
		var istPlatzIDDieSelbleWiePlaetze_DBID = datenbank.plaetze[index].platzID == platzID1;
		if(istPlatzIDDieSelbleWiePlaetze_DBID) {
			returnIndex = index;
		}
	}
	return returnIndex;
};
pack_Platz.getPlaetzeArray = function(raumNummer) {
	var datenbank = pack_Datenbank.getDatenbank();
	var raumNummer1 = raumNummer + 1;
	var plaetzeArray = [];
	var _g1 = 0;
	var _g = datenbank.plaetze.length;
	while(_g1 < _g) {
		var index = _g1++;
		var raumID = datenbank.plaetze[index].raumID;
		var platzID = datenbank.plaetze[index].platzID;
		var checkObRaumGleicheIDBesitzt = raumID == raumNummer1;
		if(checkObRaumGleicheIDBesitzt) {
			plaetzeArray.push(platzID - 1);
		}
	}
	return plaetzeArray;
};
pack_Platz.zeigDenPlatz = function(platzNummer) {
	var datenbank = pack_Datenbank.getDatenbank();
	var platzNummer1 = platzNummer;
	var contentView = pack_Platz.bodyDerPage.getElementsByClassName("view");
	contentView[0].innerHTML = "";
	var teilnehmerNameView = pack_Functions.createElemente("div");
	var teilnehmerDatumVonView = pack_Functions.createElemente("div");
	var teilnehmerDatumBisView = pack_Functions.createElemente("div");
	var teilnehmerKommentarView = pack_Functions.createElemente("div");
	var teilnehmerNameHead = pack_Functions.createElemente("h2");
	var teilnehmerDatumVonHead = pack_Functions.createElemente("h2");
	var teilnehmerDatumBisHead = pack_Functions.createElemente("h2");
	var teilnehmerKommentarHead = pack_Functions.createElemente("h2");
	var teilnehmerNameText = pack_Functions.createElemente("p");
	var teilnehmerDatumVonText = pack_Functions.createElemente("p");
	var teilnehmerDatumBisText = pack_Functions.createElemente("p");
	var teilnehmerKommentarText = pack_Functions.createElemente("p");
	var textTeilnehmerName = datenbank.plaetze[platzNummer1].teilnehmerName;
	var textTeilNehmerDatumVon = datenbank.plaetze[platzNummer1].datumVon;
	var textTeilNehmerDatumBis = datenbank.plaetze[platzNummer1].datumBis;
	var textTeilnehmerKommentar = datenbank.plaetze[platzNummer1].kommentar;
	teilnehmerNameView.setAttribute("class","teilnehmerName");
	teilnehmerDatumVonView.setAttribute("class","teilnehmerDatumVon");
	teilnehmerDatumBisView.setAttribute("class","teilnehmerDatumBis");
	teilnehmerKommentarView.setAttribute("class","teilnehmerKommentar");
	teilnehmerNameHead.innerHTML = "Teilnehmer " + "( Tisch : " + datenbank.plaetze[platzNummer1].platzNummer + " )";
	teilnehmerDatumVonHead.innerHTML = "Datum von";
	teilnehmerDatumBisHead.innerHTML = "Datum bis";
	teilnehmerKommentarHead.innerHTML = "Kommentar";
	teilnehmerNameText.innerHTML = textTeilnehmerName;
	teilnehmerDatumVonText.innerHTML = textTeilNehmerDatumVon;
	teilnehmerDatumBisText.innerHTML = textTeilNehmerDatumBis;
	teilnehmerKommentarText.innerHTML = textTeilnehmerKommentar;
	teilnehmerNameView.appendChild(teilnehmerNameHead);
	teilnehmerDatumVonView.appendChild(teilnehmerDatumVonHead);
	teilnehmerDatumBisView.appendChild(teilnehmerDatumBisHead);
	teilnehmerKommentarView.appendChild(teilnehmerKommentarHead);
	teilnehmerNameView.appendChild(teilnehmerNameText);
	teilnehmerDatumVonView.appendChild(teilnehmerDatumVonText);
	teilnehmerDatumBisView.appendChild(teilnehmerDatumBisText);
	teilnehmerKommentarView.appendChild(teilnehmerKommentarText);
	contentView[0].appendChild(teilnehmerNameView);
	contentView[0].appendChild(teilnehmerDatumVonView);
	contentView[0].appendChild(teilnehmerDatumBisView);
	contentView[0].appendChild(teilnehmerKommentarView);
};
pack_Platz.getPlatzAnzahl = function(raumID) {
	var datenbank = pack_Datenbank.getDatenbank();
	var anzahlDerRaeume = 0;
	var raumID1 = raumID;
	var _g1 = 0;
	var _g = datenbank.plaetze.length;
	while(_g1 < _g) {
		var index = _g1++;
		var istDasDerSelbeRaum = raumID1 == datenbank.plaetze[index].raumID;
		if(istDasDerSelbeRaum) {
			++anzahlDerRaeume;
		}
	}
	return anzahlDerRaeume;
};
pack_Platz.getPlatzBelegung = function(raumIndex) {
	var datenbank = pack_Datenbank.getDatenbank();
	var raumIndex1 = raumIndex;
	var vollBelegung = 0;
	var gelbBelegung = 0;
	var _g1 = 0;
	var _g = datenbank.plaetze.length;
	while(_g1 < _g) {
		var index = _g1++;
		var istDasDerSelbeRaum = raumIndex1 == datenbank.plaetze[index].raumID;
		if(istDasDerSelbeRaum) {
			var platzDatumVon = datenbank.plaetze[index].datumVon;
			var platzDatumBis = datenbank.plaetze[index].datumBis;
			var platzFarbe = pack_Tisch.getTischFarbe(platzDatumVon,platzDatumBis);
			var istDiePlatzFarbeGelb = platzFarbe == "yellow";
			var istDiePlatzFarbeRot = platzFarbe == "red";
			if(istDiePlatzFarbeGelb) {
				++vollBelegung;
				++gelbBelegung;
			} else if(istDiePlatzFarbeRot) {
				++vollBelegung;
			}
		}
	}
	return [vollBelegung,gelbBelegung];
};
var pack_Raum = function() { };
pack_Raum.__name__ = true;
pack_Raum.erstelleSpecialRaum = function() {
	var etage = pack_Raum.bodyDerPage.getElementsByClassName("etage_3")[0];
	var specialRaum = etage.getElementsByClassName("raum2")[0];
	var specialRaumDiv = pack_Functions.createElemente("div");
	specialRaumDiv.setAttribute("class","raum2_2");
	specialRaum.insertBefore(specialRaumDiv,specialRaum.firstChild);
};
pack_Raum.nachDemSpeichernRaumAEndernungAnzeigen = function(responseDatenbankJson,raumIndexID) {
	var responseDatenbankJson1 = responseDatenbankJson;
	pack_Raum.raumSettingsZeigen(raumIndexID);
	var login = pack_Raum.bodyDerPage.getElementsByClassName("login")[0];
	var tischButton = login.getElementsByClassName("tischButton")[0];
	var wennTischButtonNichtNullIst = tischButton != null;
	if(wennTischButtonNichtNullIst) {
		login.removeChild(tischButton);
	}
	var etagenNamen = "";
	var _g1 = 0;
	var _g = responseDatenbankJson1.etagen.length;
	while(_g1 < _g) {
		var index = _g1++;
		var istDasDieGleicheEtage = responseDatenbankJson1.etagen[index].etagenID == responseDatenbankJson1.raeume[raumIndexID].etagenID;
		if(istDasDieGleicheEtage) {
			etagenNamen = responseDatenbankJson1.etagen[index].etagen_ID;
		}
	}
	var zeigeRaum = pack_Raum.bodyDerPage.getElementsByClassName("zeigeRaum")[0];
	var etagenInhalt = pack_Raum.bodyDerPage.getElementsByClassName(etagenNamen)[0];
	etagenInhalt.removeChild(zeigeRaum);
	pack_Raum.raumAnzeigen(etagenNamen,raumIndexID);
};
pack_Raum.raumSettingsZeigen = function(raumIndexID) {
	var datenbank = pack_Datenbank.getDatenbank();
	var raumIndexID1 = raumIndexID;
	var view = pack_Raum.bodyDerPage.getElementsByClassName("view")[0];
	view.innerHTML = "";
	var raumForm = pack_Functions.createElemente("div");
	var raumName = pack_Functions.createElemente("div");
	var raumSichtbarkeit = pack_Functions.createElemente("div");
	var raumSubmit = pack_Functions.createElemente("div");
	raumForm.setAttribute("class","formView");
	raumName.setAttribute("class","raumName");
	raumSichtbarkeit.setAttribute("class","raumSichtbarkeit");
	raumSubmit.setAttribute("class","raumSubmit");
	var raumNameHead = pack_Functions.createElemente("h2");
	var raumSichtbarkeitHead = pack_Functions.createElemente("h2");
	var raumNameText = pack_Functions.createElemente("p");
	var raumSichtbarkeitInPut = pack_Functions.createElemente("input");
	var raumSubmitButton = pack_Functions.createElemente("input");
	var raumInputID = pack_Functions.createElemente("input");
	var raumInputView = pack_Functions.createElemente("input");
	var raumSichtbarkeitLabel = pack_Functions.createElemente("label");
	raumNameHead.innerHTML = "Raum Name";
	raumNameText.innerHTML = datenbank.raeume[raumIndexID1].raumName;
	raumName.appendChild(raumNameHead);
	raumName.appendChild(raumNameText);
	raumSichtbarkeitHead.innerHTML = "Sichbarkeit des Raumes";
	raumSichtbarkeitInPut.setAttribute("type","checkbox");
	raumSichtbarkeitInPut.setAttribute("name","view");
	raumSichtbarkeitInPut.setAttribute("id","raumSichtbarkeitInput");
	raumSichtbarkeitLabel.setAttribute("for","raumSichtbarkeitInput");
	raumSichtbarkeitLabel.innerHTML = "🗹 Sichtbar / ☐ nicht Sichtbar";
	var istRaumSichtbar = datenbank.raeume[raumIndexID1].view == 1;
	if(istRaumSichtbar) {
		raumSichtbarkeitInPut.setAttribute("checked","checked");
	} else {
		raumSichtbarkeitInPut.removeAttribute("checked");
	}
	raumSichtbarkeit.appendChild(raumSichtbarkeitHead);
	raumSichtbarkeit.appendChild(raumSichtbarkeitInPut);
	raumSichtbarkeit.appendChild(raumSichtbarkeitLabel);
	raumSubmitButton.setAttribute("type","submit");
	raumInputID.setAttribute("type","hidden");
	raumInputID.setAttribute("name","raumID");
	raumInputID.setAttribute("value","" + (raumIndexID1 + 1));
	raumInputView.setAttribute("type","hidden");
	raumInputView.setAttribute("name","raumView");
	raumInputView.setAttribute("value",js_Boot.__cast(datenbank.raeume[raumIndexID1].view , String));
	raumSubmit.appendChild(raumSubmitButton);
	view.appendChild(raumForm);
	raumSubmitButton.addEventListener("click",function() {
		var raumSpeichernUndLaden = new XMLHttpRequest();
		var raumID = raumInputID.getAttribute("value");
		var raumView = raumInputView.getAttribute("value");
		raumSpeichernUndLaden.open("POST","raumSpeichernUndLaden.php",true);
		raumSpeichernUndLaden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		raumSpeichernUndLaden.send("raumID=" + raumID + "&" + "raumView=" + raumView);
		raumSpeichernUndLaden.onreadystatechange = function() {
			if(raumSpeichernUndLaden.readyState == 4 && raumSpeichernUndLaden.status == 200) {
				datenbank = new haxe_format_JsonParser(raumSpeichernUndLaden.responseText).parseRec();
				pack_Datenbank.setDatenbank(datenbank);
			}
			var etageElement = js_Boot.__cast(pack_Raum.bodyDerPage.childNodes[3] , HTMLElement);
			pack_Etage.refreshEtage(etageElement.className);
		};
	});
	var tischPanel = pack_Functions.createElemente("div");
	var tischMinusButton = pack_Functions.createElemente("div");
	var tischPlusButton = pack_Functions.createElemente("div");
	var tischViewPanel = pack_Functions.createElemente("div");
	var tischPanelText = pack_Functions.createElemente("h2");
	var tischViewPanelText = pack_Functions.createElemente("h1");
	var tischMinusButtonText = pack_Functions.createElemente("h1");
	var tischPlusButtonText = pack_Functions.createElemente("h1");
	var plaetzeArray = pack_Platz.getPlaetzeArray(raumIndexID1);
	tischPanel.setAttribute("class","tischPanel");
	tischMinusButton.setAttribute("class","tischMinusButton");
	tischPlusButton.setAttribute("class","tischPlusButton");
	tischViewPanel.setAttribute("class","tischViewPanel");
	tischPanelText.innerHTML = "In Raum Tisch anzahl";
	tischViewPanelText.innerHTML = "" + plaetzeArray.length;
	tischMinusButtonText.innerHTML = "-1";
	tischPlusButtonText.innerHTML = "+1";
	tischViewPanel.appendChild(tischViewPanelText);
	tischMinusButton.appendChild(tischMinusButtonText);
	tischPlusButton.appendChild(tischPlusButtonText);
	tischPanel.appendChild(tischPanelText);
	tischPanel.appendChild(tischMinusButton);
	tischPanel.appendChild(tischViewPanel);
	tischPanel.appendChild(tischPlusButton);
	tischMinusButton.addEventListener("click",function() {
		var dbIndex = 0;
		var loeschenUndLaden = new XMLHttpRequest();
		var platzNummer = plaetzeArray.length;
		var raumID1 = raumIndexID1 + 1;
		loeschenUndLaden.open("POST","loeschenUndLaden.php",true);
		loeschenUndLaden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		loeschenUndLaden.send("teilnehmerPlatzNummer=" + platzNummer + "&" + "teilnehmerRaumID=" + raumID1);
		loeschenUndLaden.onreadystatechange = function() {
			if(loeschenUndLaden.readyState == 4 && loeschenUndLaden.status == 200) {
				datenbank = new haxe_format_JsonParser(loeschenUndLaden.responseText).parseRec();
				pack_Datenbank.setDatenbank(datenbank);
			}
			pack_Raum.nachDemSpeichernRaumAEndernungAnzeigen(datenbank,raumIndexID1);
		};
	});
	tischPlusButton.addEventListener("click",function() {
		var dbIndex1 = 0;
		var keineLuecke = true;
		var erstellenUndLaden = new XMLHttpRequest();
		var platzNummer1 = plaetzeArray.length + 1;
		var raumID2 = raumIndexID1 + 1;
		var _g1 = 0;
		var _g = datenbank.plaetze.length;
		while(_g1 < _g) {
			var index = _g1++;
			dbIndex1 = index + 1;
			var platzID = datenbank.plaetze[index].platzID;
			var istDieIDInDerDatenbankFrei = dbIndex1 - platzID <= -1;
			if(istDieIDInDerDatenbankFrei) {
				keineLuecke = false;
				erstellenUndLaden.open("POST","erstellenUndLaden.php",true);
				erstellenUndLaden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
				erstellenUndLaden.send("teilnehmerName=" + "Peter" + "&" + "teilnehmerDatumVonTag=" + "01" + "&" + "teilnehmerDatumVonMonate=" + "01" + "&" + "teilnehmerDatumVonJahre=" + "2017" + "&" + "teilnehmerDatumBisTage=" + "01" + "&" + "teilnehmerDatumBisMonate=" + "01" + "&" + "teilnehmerDatumBisJahre=" + "2018" + "&" + "teilnehmerKommentar=" + "test" + "&" + "teilnehmerRangeTop=" + "744" + "&" + "teilnehmerRangeLeft=" + "0" + "&" + "teilnehmerPlatzID=" + dbIndex1 + "&" + "teilnehmerPlatzNummer=" + platzNummer1 + "&" + "teilnehmerRaumID=" + raumID2);
				erstellenUndLaden.onreadystatechange = function() {
					if(erstellenUndLaden.readyState == 4 && erstellenUndLaden.status == 200) {
						datenbank = new haxe_format_JsonParser(erstellenUndLaden.responseText).parseRec();
						pack_Datenbank.setDatenbank(datenbank);
					}
					pack_Raum.nachDemSpeichernRaumAEndernungAnzeigen(datenbank,raumIndexID1);
				};
				break;
			}
		}
		if(keineLuecke) {
			erstellenUndLaden.open("POST","erstellenUndLaden.php",true);
			erstellenUndLaden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
			erstellenUndLaden.send("teilnehmerName=" + "Peter" + "&" + "teilnehmerDatumVonTag=" + "01" + "&" + "teilnehmerDatumVonMonate=" + "01" + "&" + "teilnehmerDatumVonJahre=" + "2017" + "&" + "teilnehmerDatumBisTage=" + "01" + "&" + "teilnehmerDatumBisMonate=" + "01" + "&" + "teilnehmerDatumBisJahre=" + "2018" + "&" + "teilnehmerKommentar=" + "test" + "&" + "teilnehmerRangeTop=" + "744" + "&" + "teilnehmerRangeLeft=" + "0" + "&" + "teilnehmerPlatzID=" + (dbIndex1 + 1) + "&" + "teilnehmerPlatzNummer=" + platzNummer1 + "&" + "teilnehmerRaumID=" + raumID2);
			erstellenUndLaden.onreadystatechange = function() {
				if(erstellenUndLaden.readyState == 4 && erstellenUndLaden.status == 200) {
					datenbank = new haxe_format_JsonParser(erstellenUndLaden.responseText).parseRec();
					pack_Datenbank.setDatenbank(datenbank);
				}
				pack_Raum.nachDemSpeichernRaumAEndernungAnzeigen(datenbank,raumIndexID1);
			};
		}
	});
	raumForm.appendChild(raumName);
	raumForm.appendChild(raumSichtbarkeit);
	raumForm.appendChild(tischPanel);
	raumForm.appendChild(raumSubmit);
	raumForm.appendChild(raumInputID);
	raumForm.appendChild(raumInputView);
	raumSichtbarkeitInPut.addEventListener("input",function(event) {
		var raumSichtbarkeitChecked = event.target.checked;
		if(raumSichtbarkeitChecked) {
			raumInputView.setAttribute("value","1");
		} else {
			raumInputView.setAttribute("value","0");
		}
	});
};
pack_Raum.raumAnzeigen = function(etagenNamen,raumNummer) {
	var datenbank = pack_Datenbank.getDatenbank();
	var etagenInhalt = pack_Raum.bodyDerPage.getElementsByClassName(etagenNamen)[0];
	var raumNummer1 = raumNummer;
	var darfRaumZeigen = datenbank.raeume[raumNummer1].view == 1;
	var raum = pack_Functions.createElemente("div");
	var raumStruktur = pack_Functions.createElemente("div");
	var schliesseFenster = pack_Functions.createElemente("span");
	var sollRaumGezeigtWerden = false;
	schliesseFenster.innerHTML = "x";
	raum.setAttribute("class","zeigeRaum");
	raumStruktur.setAttribute("class","imRaum");
	schliesseFenster.setAttribute("class","schliesseFenster");
	window.requestAnimationFrame(function(time) {
		window.console.log(raumStruktur.offsetWidth);
	});
	var istdasEtage1 = etagenNamen == "etage_1";
	var istdasEtage3 = etagenNamen == "etage_3";
	if(istdasEtage1) {
		pack_Tisch.getTische(raumNummer1,raumStruktur);
	} else if(istdasEtage3) {
		pack_Tisch.getTische(raumNummer1,raumStruktur);
	}
	if(darfRaumZeigen) {
		etagenInhalt.appendChild(raum);
		raum.appendChild(raumStruktur);
		raum.appendChild(schliesseFenster);
		schliesseFenster.addEventListener("click",function() {
			var resetView = pack_Raum.bodyDerPage.getElementsByClassName("view");
			var login = pack_Raum.bodyDerPage.getElementsByClassName("login");
			var istResetViewNichtNull = resetView.length <= 1;
			var istLoginNichtNull = login.length <= 1;
			if(istResetViewNichtNull) {
				resetView[0].innerHTML = "";
			}
			if(istLoginNichtNull) {
				login[0].innerHTML = "";
			}
			etagenInhalt.removeChild(raum);
		});
	}
};
pack_Raum.erstelleRaumEditButton = function(raumIndexID) {
	var raumIndexID1 = raumIndexID;
	var login = pack_Raum.bodyDerPage.getElementsByClassName("login")[0];
	var raumButton = pack_Functions.createElemente("button");
	var textButton = pack_Functions.createElemente("h2");
	login.innerHTML = "";
	textButton.innerHTML = "Raum Edit";
	raumButton.appendChild(textButton);
	raumButton.setAttribute("class","raumButton");
	login.appendChild(raumButton);
	raumButton.addEventListener("click",function() {
		pack_Raum.raumSettingsZeigen(raumIndexID1);
		var tischButton = login.getElementsByClassName("tischButton")[0];
		var wennTischButtonNichtNullIst = tischButton != null;
		if(wennTischButtonNichtNullIst) {
			login.removeChild(tischButton);
		}
	});
};
pack_Raum.raumAddEvents = function(etagenNamen) {
	var etage = pack_Raum.bodyDerPage.getElementsByClassName(etagenNamen);
	var hatEtageEinenInhalt = etage.length > 0;
	if(hatEtageEinenInhalt) {
		var datenbank = pack_Datenbank.getDatenbank();
		var etagenInhalt = etage[0];
		var raeumeInDerEtage = etagenInhalt.getElementsByClassName("raum");
		var _g1 = 0;
		var _g = raeumeInDerEtage.length;
		while(_g1 < _g) {
			var index = [_g1++];
			var index1 = index[0];
			var tmp = (function(index2) {
				return function() {
					var raumName = raeumeInDerEtage[index2[0]].getElementsByTagName("h1")[0].innerHTML;
					var _g3 = 0;
					var _g2 = datenbank.raeume.length;
					while(_g3 < _g2) {
						var index3 = _g3++;
						var istDasDerGleicheRaum = datenbank.raeume[index3].raumName == raumName;
						if(istDasDerGleicheRaum) {
							var raumArrayIndex = datenbank.raeume[index3].raumID;
							pack_Raum.raumAnzeigen(etagenNamen,raumArrayIndex - 1);
							pack_Raum.erstelleRaumEditButton(raumArrayIndex - 1);
						}
					}
					window.console.log("ich bin raum " + (index2[0] + 1));
				};
			})(index);
			raeumeInDerEtage[index1].addEventListener("click",tmp);
		}
	}
};
var pack_Tisch = function() { };
pack_Tisch.__name__ = true;
pack_Tisch.getTische = function(raumNummer,raumStruktur) {
	var datenbank = pack_Datenbank.getDatenbank();
	var darfDerRaumGeZeigtWerden = datenbank.raeume[raumNummer].view == 1;
	if(darfDerRaumGeZeigtWerden) {
		var anzahlDerTischeImRaum = pack_Platz.getPlaetzeArray(raumNummer);
		var tuer = pack_Functions.createElemente("div");
		tuer.setAttribute("class","tuer");
		tuer.style.top = datenbank.raeume[raumNummer].tuerPositionTop + "px";
		tuer.style.left = datenbank.raeume[raumNummer].tuerPositionLeft + "px";
		raumStruktur.appendChild(tuer);
		var _g1 = 0;
		var _g = anzahlDerTischeImRaum.length;
		while(_g1 < _g) {
			var index = _g1++;
			var tisch = pack_Functions.createElemente("div");
			var platzIndex = [pack_Platz.getIndexFromPlaetze_DB(anzahlDerTischeImRaum[index])];
			var platzNummer = "" + datenbank.plaetze[platzIndex[0]].platzNummer;
			var datumVon = datenbank.plaetze[platzIndex[0]].datumVon;
			var datumBis = datenbank.plaetze[platzIndex[0]].datumBis;
			var textPlatzNummer = pack_Functions.createElemente("p");
			var textPlatzName = pack_Functions.createElemente("p");
			var textDatumVon = pack_Functions.createElemente("p");
			textPlatzNummer.innerHTML = platzNummer;
			textPlatzName.innerHTML = datenbank.plaetze[platzIndex[0]].teilnehmerName;
			textDatumVon.innerHTML = datenbank.plaetze[platzIndex[0]].datumVon;
			tisch.appendChild(textPlatzNummer);
			tisch.appendChild(textPlatzName);
			tisch.appendChild(textDatumVon);
			tisch.setAttribute("class","tisch");
			tisch.style.top = datenbank.plaetze[platzIndex[0]].positionTop + "px";
			tisch.style.left = datenbank.plaetze[platzIndex[0]].positionLeft + "px";
			tisch.style.backgroundColor = pack_Tisch.getTischFarbe(datumVon,datumBis);
			raumStruktur.appendChild(tisch);
			var etagenNummer = 0;
			tisch.addEventListener("click",(function(platzIndex1) {
				return function() {
					pack_Platz.zeigDenPlatz(platzIndex1[0]);
					pack_Tisch.erstelleTischEditButton(platzIndex1[0]);
					var istSubmitActionNichtNull = typeof(pack_Tisch.submitAction) != null;
					if(istSubmitActionNichtNull && pack_Tisch.submitBool) {
						pack_Tisch.submitAction();
					}
				};
			})(platzIndex));
		}
	}
};
pack_Tisch.getTischFarbe = function(datumVon,datumBis) {
	var jahrVon = Std.parseInt(datumVon.substring(6));
	var monatVon = Std.parseInt(datumVon.substring(3,5));
	var tagVon = Std.parseInt(datumVon.substring(0,2));
	var jahrBis = Std.parseInt(datumBis.substring(6));
	var monatBis = Std.parseInt(datumBis.substring(3,5));
	var tagBis = Std.parseInt(datumBis.substring(0,2));
	var jahrHeute = new Date().getFullYear();
	var monatHeute = new Date().getMonth() + 1;
	var tagHeute = new Date().getDate();
	var timeHeute = Date.UTC(jahrHeute,monatHeute,tagHeute,0,0,0);
	var timeVon = Date.UTC(jahrVon,monatVon,tagVon,0,0,0);
	var timeBis = Date.UTC(jahrBis,monatBis,tagBis,0,0,0);
	if(timeHeute >= timeVon) {
		if(timeHeute <= timeBis) {
			return "red";
		} else {
			return "green";
		}
	} else {
		return "yellow";
	}
};
pack_Tisch.erstelleTischEditButton = function(platzNummer) {
	var platzNummer1 = platzNummer;
	var login = pack_Tisch.bodyDerPage.getElementsByClassName("login")[0];
	var tisch = login.getElementsByClassName("tischButton");
	var istEinTischVorhanden = tisch.length >= 1;
	var tischButton = pack_Functions.createElemente("button");
	var textButton = pack_Functions.createElemente("h2");
	textButton.innerHTML = "Tisch Edit";
	console.log(istEinTischVorhanden);
	if(istEinTischVorhanden) {
		login.removeChild(tisch[0]);
		tischButton.appendChild(textButton);
		tischButton.setAttribute("class","tischButton");
		login.appendChild(tischButton);
		tischButton.addEventListener("click",function() {
			pack_Tisch.zeigeSettingsVonTischEditButton(platzNummer1);
			tischButton.setAttribute("disabled","disabled");
		});
	} else {
		tischButton.appendChild(textButton);
		tischButton.setAttribute("class","tischButton");
		login.appendChild(tischButton);
		tischButton.addEventListener("click",function() {
			pack_Tisch.zeigeSettingsVonTischEditButton(platzNummer1);
			tischButton.setAttribute("disabled","disabled");
		});
	}
};
pack_Tisch.zeigeSettingsVonTischEditButton = function(platzNummer) {
	var datenbank = pack_Datenbank.getDatenbank();
	var platzNummer1 = platzNummer;
	var view = pack_Tisch.bodyDerPage.getElementsByClassName("view")[0];
	var formView = pack_Functions.createElemente("form");
	formView.innerHTML = view.innerHTML;
	view.innerHTML = "";
	view.appendChild(formView);
	formView.setAttribute("class","formView");
	formView.setAttribute("method","POST");
	formView.setAttribute("target","_self");
	var teilnehmerName = view.getElementsByClassName("teilnehmerName")[0];
	var teilnehmerDatumVon = view.getElementsByClassName("teilnehmerDatumVon")[0];
	var teilnehmerDatumBis = view.getElementsByClassName("teilnehmerDatumBis")[0];
	var teilnhemerKommentar = view.getElementsByClassName("teilnehmerKommentar")[0];
	var teilnehmerRange = pack_Functions.createElemente("div");
	teilnehmerRange.setAttribute("class","teilnehmerRange");
	var teilnehmerSubmit = pack_Functions.createElemente("div");
	teilnehmerSubmit.setAttribute("class","teilnehmerSubmit");
	var loeschenNameP = teilnehmerName.getElementsByTagName("p")[0];
	var loeschenDatumVonP = teilnehmerDatumVon.getElementsByTagName("p")[0];
	var loeschenDatumBisP = teilnehmerDatumBis.getElementsByTagName("p")[0];
	var loeschenKommentarP = teilnhemerKommentar.getElementsByTagName("p")[0];
	var inputName = pack_Functions.createElemente("input");
	var inputDatumVonTage = pack_Functions.createElemente("input");
	var inputDatumVonMonate = pack_Functions.createElemente("input");
	var inputDatumVonJahre = pack_Functions.createElemente("input");
	var inputDatumBisTage = pack_Functions.createElemente("input");
	var inputDatumBisMonate = pack_Functions.createElemente("input");
	var inputDatumBisJahre = pack_Functions.createElemente("input");
	var inputKommentar = pack_Functions.createElemente("input");
	var inputRangeTopHead = pack_Functions.createElemente("h2");
	inputRangeTopHead.innerHTML = "Position Top";
	var inputRangeTop = pack_Functions.createElemente("input");
	var rangeTop = datenbank.plaetze[platzNummer1].positionTop;
	var inputRangeLeftHead = pack_Functions.createElemente("h2");
	inputRangeLeftHead.innerHTML = "Position Left";
	var inputRangeLeft = pack_Functions.createElemente("input");
	var rangeLeft = datenbank.plaetze[platzNummer1].positionLeft;
	var inputSubmit = pack_Functions.createElemente("input");
	var inputPlatzID = pack_Functions.createElemente("input");
	var loeschenDatumVonPText = loeschenDatumVonP.innerText;
	var loeschenDatumBisPText = loeschenDatumBisP.innerText;
	var inputDatumVonJahreValue = loeschenDatumVonPText.substring(6);
	var inputDatumVonMonateValue = loeschenDatumVonPText.substring(3,5);
	var inputDatumVonTageValue = loeschenDatumVonPText.substring(0,2);
	var inputDatumBisJahreValue = loeschenDatumBisPText.substring(6);
	var inputDatumBisMonateValue = loeschenDatumBisPText.substring(3,5);
	var inputDatumBisTageValue = loeschenDatumBisPText.substring(0,2);
	var maxJahr = "" + (new Date().getFullYear() + 6);
	inputName.setAttribute("type","text");
	inputName.setAttribute("name","teilnehmerName");
	inputName.setAttribute("maxlength","45");
	inputName.setAttribute("minlength","3");
	inputName.setAttribute("value",loeschenNameP.innerText);
	inputDatumVonTage.setAttribute("type","number");
	inputDatumVonTage.setAttribute("name","teilnehmerDatumVonTag");
	inputDatumVonTage.setAttribute("max","31");
	inputDatumVonTage.setAttribute("min","1");
	inputDatumVonTage.setAttribute("value",inputDatumVonTageValue);
	inputDatumVonMonate.setAttribute("type","number");
	inputDatumVonMonate.setAttribute("name","teilnehmerDatumVonMonate");
	inputDatumVonMonate.setAttribute("max","12");
	inputDatumVonMonate.setAttribute("min","1");
	inputDatumVonMonate.setAttribute("value",inputDatumVonMonateValue);
	inputDatumVonJahre.setAttribute("type","number");
	inputDatumVonJahre.setAttribute("name","teilnehmerDatumVonJahre");
	inputDatumVonJahre.setAttribute("max",maxJahr);
	inputDatumVonJahre.setAttribute("min","1970");
	inputDatumVonJahre.setAttribute("value",inputDatumVonJahreValue);
	inputDatumBisTage.setAttribute("type","number");
	inputDatumBisTage.setAttribute("name","teilnehmerDatumBisTage");
	inputDatumBisTage.setAttribute("max","31");
	inputDatumBisTage.setAttribute("min","1");
	inputDatumBisTage.setAttribute("value",inputDatumBisTageValue);
	inputDatumBisMonate.setAttribute("type","number");
	inputDatumBisMonate.setAttribute("name","teilnehmerDatumBisMonate");
	inputDatumBisMonate.setAttribute("max","12");
	inputDatumBisMonate.setAttribute("min","1");
	inputDatumBisMonate.setAttribute("value",inputDatumBisMonateValue);
	inputDatumBisJahre.setAttribute("type","number");
	inputDatumBisJahre.setAttribute("name","teilnehmerDatumBisJahre");
	inputDatumBisJahre.setAttribute("max",maxJahr);
	inputDatumBisJahre.setAttribute("min","1970");
	inputDatumBisJahre.setAttribute("value",inputDatumBisJahreValue);
	inputKommentar.setAttribute("type","text");
	inputKommentar.setAttribute("name","teilnehmerKommentar");
	inputKommentar.setAttribute("max","1000");
	inputKommentar.setAttribute("min","1");
	inputKommentar.setAttribute("value",loeschenKommentarP.innerText);
	var inputKommentarEventInputText = inputKommentar.getAttribute("value");
	inputRangeTop.setAttribute("type","range");
	inputRangeTop.setAttribute("name","teilnehmerRangeTop");
	inputRangeTop.setAttribute("max","744");
	inputRangeTop.setAttribute("min","0");
	inputRangeTop.setAttribute("value",rangeTop);
	inputRangeLeft.setAttribute("type","range");
	inputRangeLeft.setAttribute("name","teilnehmerRangeLeft");
	inputRangeLeft.setAttribute("max","1204");
	inputRangeLeft.setAttribute("min","0");
	inputRangeLeft.setAttribute("value",rangeLeft);
	inputSubmit.setAttribute("type","submit");
	inputPlatzID.setAttribute("type","hidden");
	inputPlatzID.setAttribute("name","teilnehmerPlatzID");
	inputPlatzID.setAttribute("value","" + datenbank.plaetze[platzNummer1].platzID);
	formView.appendChild(teilnehmerRange);
	formView.appendChild(teilnehmerSubmit);
	formView.appendChild(inputPlatzID);
	teilnehmerName.appendChild(inputName);
	teilnehmerDatumVon.appendChild(inputDatumVonTage);
	teilnehmerDatumVon.appendChild(inputDatumVonMonate);
	teilnehmerDatumVon.appendChild(inputDatumVonJahre);
	teilnehmerDatumBis.appendChild(inputDatumBisTage);
	teilnehmerDatumBis.appendChild(inputDatumBisMonate);
	teilnehmerDatumBis.appendChild(inputDatumBisJahre);
	teilnhemerKommentar.appendChild(inputKommentar);
	teilnehmerRange.appendChild(inputRangeTopHead);
	teilnehmerRange.appendChild(inputRangeTop);
	teilnehmerRange.appendChild(inputRangeLeftHead);
	teilnehmerRange.appendChild(inputRangeLeft);
	teilnehmerSubmit.appendChild(inputSubmit);
	teilnehmerName.removeChild(loeschenNameP);
	teilnehmerDatumVon.removeChild(loeschenDatumVonP);
	teilnehmerDatumBis.removeChild(loeschenDatumBisP);
	teilnhemerKommentar.removeChild(loeschenKommentarP);
	inputRangeLeft.addEventListener("input",function(event) {
		var inputRangeLeftValue = event.target.value;
		pack_Tisch.tischChangePositionLeft(platzNummer1,inputRangeLeftValue);
	});
	inputRangeTop.addEventListener("input",function(event1) {
		var inputRangeTopValue = event1.target.value;
		pack_Tisch.tischChangePositionTop(platzNummer1,inputRangeTopValue);
	});
	formView.addEventListener("submit",function(event2) {
		event2.preventDefault();
	});
	inputKommentar.addEventListener("input",function(event3) {
		inputKommentarEventInputText = event3.target.value;
	});
	var submitFunction = function() {
		var valueName = Reflect.field(inputName,"value");
		var valueDatumVonJahre = Reflect.field(inputDatumVonJahre,"value");
		var valueDatumVonMonate = Reflect.field(inputDatumVonMonate,"value");
		var valueDatumVonTage = Reflect.field(inputDatumVonTage,"value");
		var valueDatumBisJahre = Reflect.field(inputDatumBisJahre,"value");
		var valueDatumBisMonate = Reflect.field(inputDatumBisMonate,"value");
		var valueDatumBisTage = Reflect.field(inputDatumBisTage,"value");
		var valueKommentar = Reflect.field(inputKommentar,"value");
		var valueRangeTop = Reflect.field(inputRangeTop,"value");
		var valueRangeLeft = Reflect.field(inputRangeLeft,"value");
		var valuePlatzID = Reflect.field(inputPlatzID,"value");
		var speichernDannLaden = new XMLHttpRequest();
		speichernDannLaden.open("POST","speicherndannladen.php",true);
		speichernDannLaden.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		speichernDannLaden.send("teilnehmerName=" + valueName + "&" + "teilnehmerDatumVonTag=" + valueDatumVonTage + "&" + "teilnehmerDatumVonMonate=" + valueDatumVonMonate + "&" + "teilnehmerDatumVonJahre=" + valueDatumVonJahre + "&" + "teilnehmerDatumBisTage=" + valueDatumBisTage + "&" + "teilnehmerDatumBisMonate=" + valueDatumBisMonate + "&" + "teilnehmerDatumBisJahre=" + valueDatumBisJahre + "&" + "teilnehmerKommentar=" + valueKommentar + "&" + "teilnehmerRangeTop=" + valueRangeTop + "&" + "teilnehmerRangeLeft=" + valueRangeLeft + "&" + "teilnehmerPlatzID=" + valuePlatzID);
		return speichernDannLaden.onreadystatechange = function() {
			if(speichernDannLaden.readyState == 4 && speichernDannLaden.status == 200) {
				var responseDatenbankJson = new haxe_format_JsonParser(speichernDannLaden.responseText).parseRec();
				datenbank = pack_Datenbank.setgetDatenbank(responseDatenbankJson);
				var etagen_Name = "";
				var raum_IndexID = js_Boot.__cast(datenbank.plaetze[platzNummer1].raumID - 1 , Int);
				var _g1 = 0;
				var _g = datenbank.etagen.length;
				while(_g1 < _g) {
					var index = _g1++;
					var istDasDieGleicheEtage = datenbank.etagen[index].etagenID == datenbank.raeume[raum_IndexID].etagenID;
					if(istDasDieGleicheEtage) {
						etagen_Name = datenbank.etagen[index].etagen_ID;
					}
				}
				var zeigeRaum = pack_Tisch.bodyDerPage.getElementsByClassName("zeigeRaum")[0];
				var etagenInhalt = pack_Tisch.bodyDerPage.getElementsByClassName(etagen_Name)[0];
				etagenInhalt.removeChild(zeigeRaum);
				pack_Raum.raumAnzeigen(etagen_Name,raum_IndexID);
			}
		};
	};
	pack_Tisch.submitAction = submitFunction;
	pack_Tisch.submitBool = true;
	inputSubmit.addEventListener("click",function(event4) {
		submitFunction();
	});
};
pack_Tisch.tischChangePositionLeft = function(platzNummer,inputValue) {
	var datenbank = pack_Datenbank.getDatenbank();
	var platzNummer1 = platzNummer;
	var inputValue1 = inputValue;
	var raum = pack_Tisch.bodyDerPage.getElementsByClassName("imRaum")[0];
	var tische = raum.getElementsByClassName("tisch");
	var platzNummerID = datenbank.plaetze[platzNummer1].platzNummer;
	var _g1 = 0;
	var _g = tische.length;
	while(_g1 < _g) {
		var index = _g1++;
		var tisch = tische[index];
		var tischFirstElement = tisch.firstElementChild;
		var tischText = tischFirstElement.innerText;
		var istPlatzNummerIDDieGleicheWieTischText = tischText == platzNummerID;
		if(istPlatzNummerIDDieGleicheWieTischText) {
			tisch.style.left = "" + inputValue1 + "px";
		}
	}
};
pack_Tisch.tischChangePositionTop = function(platzNummer,inputValue) {
	var datenbank = pack_Datenbank.getDatenbank();
	var platzNummer1 = platzNummer;
	var inputValue1 = inputValue;
	var raum = pack_Tisch.bodyDerPage.getElementsByClassName("imRaum")[0];
	var tische = raum.getElementsByClassName("tisch");
	var platzNummerID = datenbank.plaetze[platzNummer1].platzNummer;
	var _g1 = 0;
	var _g = tische.length;
	while(_g1 < _g) {
		var index = _g1++;
		var tisch = tische[index];
		var tischFirstElement = tisch.firstElementChild;
		var tischText = tischFirstElement.innerText;
		var istPlatzNummerIDDieGleicheWieTischText = tischText == platzNummerID;
		if(istPlatzNummerIDDieGleicheWieTischText) {
			tisch.style.top = "" + inputValue1 + "px";
		}
	}
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
js_Boot.__toStr = ({ }).toString;
pack_Etage.bodyDerPage = window.document.body;
pack_Etage.nameDerEtage = "";
pack_Menu.bodyDerPage = window.document.body;
pack_Menu.dieseEtage = "";
pack_Platz.bodyDerPage = window.document.body;
pack_Raum.bodyDerPage = window.document.body;
pack_Tisch.bodyDerPage = window.document.body;
pack_Tisch.submitBool = false;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
